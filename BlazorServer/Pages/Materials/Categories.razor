@page "/categories"

@using AutoMapper

@inject IMapper _mapper;



<RadzenText TextStyle="TextStyle.H3" TagName="TagName.H1" Class="my-4"> Categories </RadzenText>

<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Class="mt-2 mb-4" Text="Add New Category" Click="@InsertRow" Disabled=@(CategoryDtoToInsert != null || CategoryDtoToUpdate != null) />

<RadzenDataGrid @ref="CategoryDtosGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@categorieDtos" TItem="CategoryDto" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">

    <Columns>
        <RadzenDataGridColumn TItem="CategoryDto" Property="Id" Title="ID" Width="20%" />

        <RadzenDataGridColumn TItem="CategoryDto" Property="Name" Title="Name" Width="30%">
            <EditTemplate Context="categorieDto">
                <RadzenTextBox @bind-Value="categorieDto.Name" Style="width:100%; display: block" Name="CategoryName" />
                <RadzenRequiredValidator Text="Category Name Is Required" Component="CategoryName" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="CategoryDto" Context="categorieDtos" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
            <Template Context="categorieDto">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(categorieDto))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => DeleteRow(categorieDto))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>

            <EditTemplate Context="categorieDto">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(categorieDto))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@((args) => CancelEdit(categorieDto))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => DeleteRow(categorieDto))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code
{
//--------------------------------------------------------------------------------------------------------------------------------------
    [Inject]
    public IServiceGeneric<CategoryDto, Category, CreateCategoryDto, UpdateCategoryDto> _categorieservice { get; set; }

    RadzenDataGrid<CategoryDto> CategoryDtosGrid;
    IEnumerable<CategoryDto> categorieDtos;
    CategoryDto CategoryDtoToInsert;
    CategoryDto CategoryDtoToUpdate;

    protected override async Task OnInitializedAsync()
    {
        categorieDtos = await _categorieservice.GetAllAsync();
        ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success Load", Duration = 3000 });
    }

    async Task InsertRow()
    {
        CategoryDtoToInsert = new CategoryDto();
        await CategoryDtosGrid.InsertRow(CategoryDtoToInsert);
    }
    async Task OnCreateRow(CategoryDto dto)
    {
        dto.Id = 0;
        _categorieservice.AddAsync(_mapper.Map<CreateCategoryDto>(dto));
        ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Category Created", Duration = 3000 });
        CategoryDtoToInsert = null;
    }

    async Task SaveRow(CategoryDto CategoryDto)
    {
        await CategoryDtosGrid.UpdateRow(CategoryDto);
    }

    void CancelEdit(CategoryDto CategoryDto)
    {
        if (CategoryDto == CategoryDtoToInsert)
        {
            CategoryDtoToInsert = null;
        }
        CategoryDtoToUpdate = null;
        CategoryDtosGrid.CancelEditRow(CategoryDto);
        ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Warning, Summary = "Canceled", Duration = 2000 });
    }

    //UpdateRow
    async Task EditRow(CategoryDto CategoryDto)
    {
        CategoryDtoToUpdate = CategoryDto;
        await CategoryDtosGrid.EditRow(CategoryDto);
        ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Category Updated", Duration = 3000 });
    }

    async void OnUpdateRow(CategoryDto dto)
    {
        if (dto == CategoryDtoToInsert)
        {
            CategoryDtoToInsert = null;
        }
        CategoryDtoToUpdate = null;
        _categorieservice.UpdateAsync(_mapper.Map<UpdateCategoryDto>(dto));
    }

    //DeleteRow
    async Task DeleteRow(CategoryDto categoryDto)
    {
        if (categoryDto == CategoryDtoToInsert)
        {
            CategoryDtoToInsert = null;
        }
        if (categoryDto == CategoryDtoToUpdate)
        {
            CategoryDtoToUpdate = null;
        }
        if (categorieDtos.Contains(categoryDto))
        {
            await _categorieservice.DeleteAsync(categoryDto.Id);
            categorieDtos = await _categorieservice.GetAllAsync();
            CategoryDtosGrid.Reload();
            ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Category Deleted", Duration = 3000 });
        }
        else
        {
            CategoryDtosGrid.CancelEditRow(categoryDto);
            CategoryDtosGrid.Reload();
        }
    }

    async void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
        //Console.WriteLine($"{message.Severity} notification");
    }
}