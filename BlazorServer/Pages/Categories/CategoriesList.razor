@page "/categories-list"
@using BlazorServer.Services
@using Domain.Material
@using SharedProject.Dtos


@inject NotificationService notificationService


<RadzenText TextStyle="TextStyle.H3" TagName="TagName.H1" Class="my-4">
   Categories
</RadzenText>


<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Class="mt-2 mb-4" Text="Add New Category" Click="@InsertRow" Disabled=@(CategoryDtoToInsert != null || CategoryDtoToUpdate != null) />

<RadzenDataGrid @ref="CategoryDtosGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@categorieDtos" TItem="CategoryDto" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">

    <Columns>
        <RadzenDataGridColumn TItem="CategoryDto" Property="Id" Title="Category ID" Width="220px" />

        <RadzenDataGridColumn TItem="CategoryDto" Property="Name" Title="Category Name">
            <EditTemplate Context="categorieDto">
                <RadzenTextBox @bind-Value="categorieDto.Name" Style="width:70%; display: block" Name="CategoryName" />
                <RadzenRequiredValidator Text="Category Name Is Required" Component="CategoryName" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="CategoryDto" Context="categorieDtos" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
            <Template Context="categorieDto">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(categorieDto))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => DeleteRow(categorieDto))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>

            <EditTemplate Context="categorieDto">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(categorieDto))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@((args) => CancelEdit(categorieDto))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => DeleteRow(categorieDto))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>


    </Columns>
</RadzenDataGrid>



@code {

    [Inject]
    public ICategoryService _categorieservice { get; set; }

    RadzenDataGrid<CategoryDto> CategoryDtosGrid;
    IEnumerable<CategoryDto> categorieDtos;

    protected override async Task OnInitializedAsync()
    {
        categorieDtos = await _categorieservice.GetAllCategories();
        ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success Load", Duration = 4000 });


    }


    CategoryDto CategoryDtoToInsert;
    CategoryDto CategoryDtoToUpdate;

    async Task InsertRow()
    {
        CategoryDtoToInsert = new CategoryDto();
        await CategoryDtosGrid.InsertRow(CategoryDtoToInsert);
    }

    async Task OnCreateRow(CategoryDto categoryDto)
    {
        categoryDto.Id = 0;

        _categorieservice.AddCategoryAsync(categoryDto);
        //categorieDtos = await _categorieservice.GetAllCategories();
        ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Category Created", Duration = 4000 });
        CategoryDtoToInsert = null;
    }



    async Task SaveRow(CategoryDto CategoryDto)
    {
        await CategoryDtosGrid.UpdateRow(CategoryDto);
        ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Category Updated", Duration = 4000 });

    }

    void CancelEdit(CategoryDto CategoryDto)
    {
        if (CategoryDto == CategoryDtoToInsert)
        {
            CategoryDtoToInsert = null;
        }

        CategoryDtoToUpdate = null;

        CategoryDtosGrid.CancelEditRow(CategoryDto);
        ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Warning, Summary = "Canceled", Duration = 2000 });

    }


    //UpdateRow
    async Task EditRow(CategoryDto CategoryDto)
    {
        CategoryDtoToUpdate = CategoryDto;
        await CategoryDtosGrid.EditRow(CategoryDto);
    }

    async void OnUpdateRow(CategoryDto categoryDto)
    {
        if (categoryDto == CategoryDtoToInsert)
        {
            CategoryDtoToInsert = null;
        }

        CategoryDtoToUpdate = null;

        _categorieservice.UpdateCategoryAsync(categoryDto);
    }





    //DeleteRow

    async Task DeleteRow(CategoryDto categoryDto)
    {
        if (categoryDto == CategoryDtoToInsert)
        {
            CategoryDtoToInsert = null;
        }

        if (categoryDto == CategoryDtoToUpdate)
        {
            CategoryDtoToUpdate = null;
        }

        if (categorieDtos.Contains(categoryDto))
        {
            await _categorieservice.DeleteCategoryAsync(categoryDto.Id);
            categorieDtos = await _categorieservice.GetAllCategories();
            CategoryDtosGrid.Reload();
            ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Category Deleted", Duration = 4000 });

        }
        else
        {
            CategoryDtosGrid.CancelEditRow(categoryDto);
            CategoryDtosGrid.Reload();

        }
    }


    async void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
        //Console.WriteLine($"{message.Severity} notification");
    }


}